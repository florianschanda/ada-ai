!standard 0.2(57.15/3)                                      15-01-28  AI12-0141-1/02
!standard 0.2(57.16/3)
!class presentation 14-12-04
!status Corrigendum 2015 14-12-04
!status WG9 Approved 15-06-26
!status ARG Approved 10-0-0  15-01-28
!status work item 14-12-04
!status received 14-12-03
!priority Low
!difficulty Easy
!qualifier Clarification
!subject Add Raise Expression to Introduction

!summary

Add interfaces to the list of types that can have invariants in paragraph 57.15/3 of the introduction.
Add raise expressions to the list in paragraph 57.16/3 of the introduction.

!question

The Introduction, paragraph 57.16/3 describes the kinds of expressions added by
Ada 2012. AI12-0022-1 added raise expressions, which is another kind of expression
associated with Ada 2012. Should it be mentioned in the Introduction? (Yes.)

!recommendation

(See Summary.)

!wording

Modify Introduction (57.15/3):

The concept of assertions introduced in the 2005 edition is extended with the
ability to specify preconditions and postconditions for subprograms, and
invariants for private types{ and interfaces}. The concept of constraints in
defining subtypes is supplemented with subtype predicates that enable subsets
to be specified other than as simple ranges. These properties are all indicated
using aspect specifications. See subclauses 3.2.4, 6.1.1, and 7.3.2.

Modify Introduction (57.16/3):

New forms of expressions are introduced. These are if expressions, case expressions,
quantified expressions, [and ]expression functions{, and raise expressions}. As
well as being useful for programming in general by avoiding the introduction of
unnecessary assignments, they are especially valuable in conditions and invariants
since they avoid the need to introduce auxiliary functions. See subclauses 4.5.7,
4.5.8, [and ]6.8{, and 11.3}. Membership tests are also made more flexible. See
subclauses 4.4 and 4.5.2.

!discussion

We also add "interfaces" to "private types" as types that can have an invariant.

None of the other changes of the corrigendum seem worth mentioning in the
Introduction.

!corrigendum 0.2(57.15/3)

@drepl
@xbullet<The concept of assertions introduced in the 2005 edition is extended
with the ability to specify preconditions and postconditions for subprograms,
and invariants for private types. The concept of constraints in defining
subtypes is supplemented with subtype predicates that enable subsets to be
specified other than as simple ranges. These properties are all indicated
using aspect specifications. See subclauses 3.2.4, 6.1.1, and 7.3.2.>
@dby
@xbullet<The concept of assertions introduced in the 2005 edition is extended
with the ability to specify preconditions and postconditions for subprograms,
and invariants for private types and interfaces. The concept of constraints in
defining subtypes is supplemented with subtype predicates that enable subsets
to be specified other than as simple ranges. These properties are all indicated
using aspect specifications. See subclauses 3.2.4, 6.1.1, and 7.3.2.>

!corrigendum 0.2(57.16/3)

@drepl
@xbullet<New forms of expressions are introduced. These are if expressions,
case expressions, quantified expressions, and expression functions. As well
as being useful for programming in general by avoiding the introduction of
unnecessary assignments, they are especially valuable in conditions and
invariants since they avoid the need to introduce auxiliary functions. See
subclauses 4.5.7, 4.5.8, and 6.8. Membership tests are also made more
flexible. See subclauses 4.4 and 4.5.2.>
@dby
@xbullet<New forms of expressions are introduced. These are if expressions,
case expressions, quantified expressions, expression functions, and raise
expressions. As well
as being useful for programming in general by avoiding the introduction of
unnecessary assignments, they are especially valuable in conditions and
invariants since they avoid the need to introduce auxiliary functions. See
subclauses 4.5.7, 4.5.8, 6.8, and 11.3. Membership tests are also made more
flexible. See subclauses 4.4 and 4.5.2.>


!ASIS

No changes needed.

!ACATS test

No test needed.

!appendix


****************************************************************
