!standard D.13(8/3)                                13-11-07    AI12-0055-1/03
!standard D.13(9/3)
!class binding interpretation 12-12-08
!status work item 12-12-08
!status received 12-12-08
!priority Medium
!difficulty Medium
!qualifier Omission
!subject All properties of a profile are defined by pragmas

!summary

The application of the Ravenscar Profile to multiprocessors requires 
one new configuration pragma and one new restriction to be defined to 
ensure that all tasks are assigned to a CPU.

!question

The definition of a profile says (13.12(13/3)):

A profile is equivalent to the set of configuration pragmas that is defined for
each usage profile. 

However, the Ravenscar profile has rules (D.13.1(8-9/3)) that are not associated
with any configuration pragma.

Should one be defined? (Yes.)

!recommendation

(See !summary.)

!wording

Add pragma Environment_Task_CPU (expression), where expression is of 
subtype CPU, to TBD. (Pattern the wording after the similar wording in
J.15.7 and D.16.)

Add restriction No_Tasks_Unassigned_To_CPU to TBD.

Delete D.13(8/3) and insert a user note explaining that Ravenscar wants 
every individual task to be explicitly assigned to a CPU.

Update D.16.1(30.d/4) to include pragma Environment_Task_CPU as a way 
for tasks to be assigned to a specific CPU.

[The author asked for the editor to create the actual wording here; not before the
upcoming meeting, sorry. - Editor.]

!discussion

During the discussion of AI12-0048-1, it was pointed out that Ravenscar has special
rules for the assignment of tasks to processors. These rules appear to require that
FIFO_within_Priorities scheduling be ineffective of Ravenscar programs (as it appears
impossible in general for the implementation to assign tasks such that unbounded
priority inversion cannot occur]). [That is possible for some systems of tasks
and priorities, and it can often be done by hand, but the rules require the
system to do it automatically.] It was felt by some that hiding such a significant
change to the priority model in an Implementation Requirement is far too subtle.

At this point, it was noted that Ravenscar is a profile, which is just a collection
of pragmas. But the behavior of D.13(8-9/3) is not tied to any pragma. This is wrong.
Moreover, by defining it as a pragma, both the rules and the effects would be more
visible.

We actually choose to define two pragmas. [Note: Names and exact semantics TBD.]

First, we define a configuration pragma that assigns a CPU to the environment task.

    pragma Environment_Task_CPU (expression);

The expression is of subtype CPU as defined at D.16 4/3. The pragma has 
the same meaning as pragma CPU given in the main subprogram (but of course it can
be given separately from the main subprogram).

Second, we add a new restriction:

    No_Tasks_Unassigned_To_CPU

to signify that (1) Not_A_Specific_CPU is not allowed in aspect CPU or 
pragma CPU, and (2) either no CPU aspect is used in the program so that 
all tasks get assigned to the environment task's CPU or all tasks have a 
CPU aspect. [This restriction should not apply to parameters of calls 
to the Dispatching_Domain package as in that context it might make 
sense to let the implementation choose.]

The profile Ravenscar is enhanced with
    pragma Environment_Task_CPU (1);
and
    No_Not_A_Specific_CPU
is added to the list of restrictions in an appropriate place.

Finally, D.13(8/3) is deleted; it follows from other rules. There should be a 
user note discussing this: with the given definition, a Ravenscar 
program will always run on a single CPU unless the programmer takes 
action with aspect CPU to define otherwise. The text about "ready 
queues" is obvious (it's the definition of assigning a CPU to a task); 
and the Not_A_Specific_CPU text is OBE.

We also need to update the list of ways to specify the assignment of a task in
AARM D.16.1(30.d/4), added by AI12-0048-1, to include Environment_Task_CPU.

!ACATS Test

Create an ACATS C-Test to check the existence of the new pragma.

!appendix

This AI was created out of discussion on AI12-0048-1 during ARG meeting
#48 in Boston.

****************************************************************

From: Alan Burns
Sent: Thursday, May 30, 2013  8:18 AM

There has been discussions on these AIs from within the IRTAW 'community'.
Our views are as follows (note we also looked at AI-0048 as well).

... [Only relevant part here - Editor.]

For Ravenscar the intent is that all tasks are statically allocated to CPUs
(and there is just one Dispatching Domain). And as a Profile, the intent must
be indicated by pragmas (that are then incorporated into the Profile).

The simplest way to enforce static allocation is to:

1) Introduce a configuration pragma that assigns a CPU to the environment task,
   and for Ravenscar, perhaps, force this CPU to be number 1.

All program tasks would then run on the same CPU as the environment task unless
they used the CPU aspect. This is safe unless they used 'Not_A_Specific_CPU'.
So

2) Introduce a pragma that prevents the use of Not_A_Specific_CPU.

These two pragmas should then be added to the Ravenscar Profile.

So if the programmer does nothing else all tasks will run on CPU 1, but they can
use the CPU aspect to do the allocation (just as they assign priorities).

There is some discussion in the AI about priority inversion. For static task
allocation (as in Ravenscar) this is not an issue. It is clear from the
definition of the dispatching model that conceptually all processors have a
distinct set of ready queues. So yes a middle priority task on one CPU can be
preempted while a low priority task on another CPU is running, but that is exactly
what is expected.

Now to the  Implementation Advice D.13.9/3 Here we think this should remain as
Advice. It is really just saying that the conceptual model of a set of ready
queues per processor should form the basic of the actual implementation.
Good advice, but not enforceable in the language

I hope this clears up the points raised (no doubt there will be more). 
Tullio will be at the ARG meeting.

****************************************************************


