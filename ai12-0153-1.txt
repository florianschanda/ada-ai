!standard 13.1.1(15/3)                                   15-02-23  AI12-0153-1/02
!standard 3.5(56.3/3)
!standard 3.6(22.2/3)
!class binding interpretation 15-02-20
!status No Action (8-0-2) 15-02-26
!status work item 15-02-20
!status received 15-01-28
!priority Low
!difficulty Easy
!qualifier Omission
!subject Default value of Boolean-valued aspects
!summary

Boolean-valued aspects default to False.

!question

Boolean-valued aspects have special rules that apply to them, including that the
value can be omitted (and then is True - 13.1.1(15/3)). That doesn't make much
sense unless the default value of the aspect is False. But that is left to the
individual aspects. Should there be a blanket rule for this? (Yes.)

!recommendation

(See Summary.)

!wording

Modify 13.1.1(15/3):

  The aspect_definition associated with a given aspect_mark may be omitted only
  when the aspect_mark identifies an aspect {specifically} of a boolean type,
  in which case it is equivalent to the aspect_definition being specified as True.
  {If an aspect having specifically a boolean type is not specified (directly
  or by inheritance) then it has the value False.}

AARM Ramification: These rules are carefully worded so they only apply to
aspects that are defined to have a boolean type, but not to aspects that are 
defined to have some type that *might* be boolean. For instance, this rule
does not apply to aspects Default_Value and Default_Component_Value.

Modify 3.5(56.3/3):

 Default_Value
    This aspect shall be specified by a static expression[, and that expression
    shall be explicit, even if the aspect has a boolean type]. Default_Value
    shall be specified only on a full_type_declaration.

Modify 3.6(22.3/3):
  Default_Component_Value
    This aspect shall be specified by a static expression[, and that expression
    shall be explicit, even if the aspect has a boolean type].
    Default_Component_Value shall be specified only on a full_type_declaration.


[Editor's note: None of the below changes the RM, only the AARM.]

Mark as redundant wording for Inline (6.3.2):
  Redundant[This aspect is never inherited;] if not directly specified,
  the aspect is False.

Same for No_Return (6.5.1):
  Redundant[This aspect is never inherited;] if not directly specified,
  the aspect is False.

Same for Pack (13.2):
  If not specified (including by inheritance), the aspect is False.

Same in B.1 (Import and Export):
  "; if not directly specified, the Import aspect is False"
  "; if not directly specified, the Export aspect is False".
   
Same for Interrupt_Handler (C.3.1):
  Redundant[This aspect is never inherited;] if not directly specified,
  the aspect is False.

Same for Unchecked_Union (B.3.3):
  If not specified (including by inheritance), the aspect is False.

Same for Asynchronous (E.4.1 - two places):
  If not specified, the aspect is False.
  If not specified (including by inheritance), the aspect is False.


!discussion

It's weird to have blanket rules that depend on some property not covered
by the blanket rules. We correct that.

OTOH, we leave the text at each aspect defining the default value, because
otherwise it looks like an omission. Casual readers of the Standard are
unlikely to be aware of the blanket rules that apply.

In the case of the three passages which already begin with redundant text, as
in
   Redundant[This aspect is never inherited;]
the only change is to move the closing square bracket so that the entire
sentence is enclosed.

We change the existing wording of paragraph 15/3 as well as the new wording
so that it does not apply to aspects like Default_Value that might have a
boolean type. Otherwise, we would require extra wording in 3.5 and 3.6 to
override this default (we surely don't want all boolean types and arrays of
boolean to have a default value of False if none is specified).

We wouldn't have to delete the wording in 3.5 and 3.6, but it is so unusual
that it seems better to eliminate it.

We could have tried to make a similar change to 13.1.1(34/3), but the wording
change isn't obvious and we don't have to make such a change, so we didn't do
that.

!corrigendum 3.5(56.3/3)

@drepl
@xhang<@xterm<Default_Value>
This aspect shall be specified by a static expression, and that
expression shall be explicit, even if the aspect has a boolean type.
Default_Value shall be specified only on a @fa<full_type_declaration>.>
@dby
@xhang<@xterm<Default_Value>
This aspect shall be specified by a static expression.
Default_Value shall be specified only on a @fa<full_type_declaration>.>

!corrigendum 3.6(22.2/3)

@drepl
@xhang<@xterm<Default_Component_Value>
This aspect shall be specified by a static expression, and that
expression shall be explicit, even if the aspect has a boolean type.
Default_Component_Value shall be specified only on a @fa<full_type_declaration>.>
@dby
@xhang<@xterm<Default_Component_Value>
This aspect shall be specified by a static expression.
Default_Component_Value shall be specified only on a @fa<full_type_declaration>.>

!corrigendum 13.1.1(15/3)

@drepl
The @fa<aspect_definition> associated with a given @fa<aspect_mark> may be
omitted only when the @fa<aspect_mark> identifies an aspect of a boolean type,
in which case it is equivalent to the @fa<aspect_definition> being specified
as True.
@dby
The @fa<aspect_definition> associated with a given @fa<aspect_mark> may be
omitted only when the @fa<aspect_mark> identifies an aspect specifically of a
boolean type, in which case it is equivalent to the @fa<aspect_definition>
being specified as True. If an aspect having specifically a boolean type is
not specified (directly or by inheritance) then it has the value False.

!ASIS

No ASIS effect.

!ACATS test

This rule does not change the meaning of any aspect (we hope), so no tests
are needed.

!appendix

This AI came out of discussion during the ARG phone meeting of
January 28, 2015. See the minutes of that meeting for details.

****************************************************************

