!standard A.5.1 (5)                                  13-12-24    AI12-0091-1/02
!class Amendment 13-10-31
!status work item 13-10-31
!status received 13-10-17
!priority Low
!difficulty Easy
!subject Add procedure Sin_Cos to Ada.Numerics.Generic_Elementary_Functions
!summary

Procedure Sin_Cos is added to Ada.Numerics.Generic_Elementary_Functions
!problem

In many cases you need the sinus and the cosinus of an angle.
Modern FPUs (at least since 80387 in 1987) provide the calculation of both
sin and cos at the same time (fsincos instruction). In performance-sensitive
programs, calling the Sin and Cos functions separately is an obvious bottleneck.

!proposal

(See summary.)

!wording

Add after A.5.1(5):

procedure Sin_Cos (X        : in Float_Type'Base; Sin, Cos : out Float_Type'Base);

procedure Sin_Cos (X, Cycle : in Float_Type'Base; Sin, Cos : out Float_Type'Base);

Modify A.5.1(10):

The [functions]{subprograms} have their usual mathematical meanings. When the
Base parameter is specified, the Log function computes the logarithm to the
given base; otherwise, it computes the natural logarithm. When the Cycle
parameter is specified, the parameter X of the forward trigonometric
[functions]{subprograms} (Sin, Cos, Tan,[ and] Cot{, and SinCos}) and the
results of the inverse trigonometric functions (Arcsin, Arccos, Arctan, and
Arccot) are measured in units such that a full cycle of revolution has the given
value; otherwise, they are measured in radians.

Modify A.5.1(38):

When the parameter X has the value zero, the Sqrt, Sin, Arcsin, Tan, Sinh,
Arcsinh, Tanh, and Arctanh functions yield a result of zero, {the Sin parameter
of the SinCos procedure yields a value of zero,}[and] the Exp, Cos, and Cosh
functions yield a result of one{, and the Cos parameter of the SinCos procedure
yields a value of one}.

Modify A.5.1(41):

The results of the Sin, Cos, Tan,[ and] Cot{, and SinCos}
[functions]{subprograms} with specified cycle are exact when the mathematical
result is zero; those of [the first two]{Sin, Cos and SinCos} are also exact
when the mathematical result is ñ 1.0.

Modify A.5.1(45):

A prescribed zero result delivered at the origin by one of the odd functions
(Sin, Arcsin, Sinh, Arcsinh, Tan, Arctan or Arccot as a function of Y when X is
fixed and positive, Tanh, and Arctanh){, or the Sin parameter of procedure
SinCos,} has the sign of the parameter X (Y, in the case of Arctan or Arccot).

Add after G.1.2(4):

procedure Sin_Cos (X : in Complex; Sin, Cos : out Complex);

Modify G.1.2 (36):

When the parameter X has the value zero, the Sqrt, Sin, Arcsin, Tan, Arctan,
Sinh, Arcsinh, Tanh, and Arctanh functions yield a result of zero; {the Sin
parameter of the SinCos procedure yields a value of zero; }the Exp, Cos, and
Cosh functions yield a result of one; {and the Cos parameter of the SinCos
procedure yields a value of one; }the Arccos and Arccot functions yield a real
result; and the Arccoth function yields an imaginary result.

Modify G.1.2 (48):

The implementation of the Exp function of a complex parameter X is allowed to
raise the exception Constraint_Error, signaling overflow, when the real
component of X exceeds an unspecified threshold that is approximately
log(Complex_Types.Real'Safe_Last). This permission recognizes the impracticality
of avoiding overflow in the marginal case that the exponential of the real
component of X exceeds the safe range of Complex_Types.Real but both components
of the final result do not. Similarly, the Sin[ and]{,} Cos {and SinCos }(resp.,
Sinh and Cosh) [function]{subprograms} are allowed to raise the exception
Constraint_Error, signaling overflow, when the absolute value of the imaginary
(resp., real) component of the parameter X exceeds an unspecified threshold that
is approximately log(Complex_Types.Real'Safe_Last) + log(2.0). This permission
recognizes the impracticality of avoiding overflow in the marginal case that the
hyperbolic sine or cosine of the imaginary (resp., real) component of X exceeds
the safe range of Complex_Types.Real but both components of the final result do
not.

!discussion

None needed (?)

!ASIS

No ASIS impact.

!ACATS test

An ACATS C-Test is needed.

!appendix

!topic Ada.Numerics.Generic_Elementary_Functions: procedure Sin_Cos
!reference A.5.1 (5)
!from Gautier de Montmollin 17-10-13
!keywords sin cos sin_cos
!discussion

Here is a proposal for an addition to the trigonometric part of elementary functions:


   procedure Sin_Cos (X : in Float_Type'Base; Sin, Cos : out Float_Type'Base);

The rationale is the following: in many cases you need the sinus and the
cosinus of an angle. Modern FPUs (at least since 80387 in 1987) provide the
calculation of both sin and cos at the same time (fsincos instruction).
In performance-sensitive programs, calling the Sin and Cos functions
separately is an obvious bottleneck.

****************************************************************

From: Jeff Cousins
Sent: Tuesday, December 24, 2013  9:32 AM

Here's my go at some words.  I've included cycle and complex versions too; they
can always be cut if not wanted. [This is version /02 of the AI - Editor.]

AI12-0091 was the only AI from the meeting to catch the attention of the UK Ada
panel, with people saying that they didn't like it, it should be up to the
compiler to perform any optimisation.  So despite my having done this work I
might feel that I have to vote against it, or at least abstain.  Oh what irony.

By the way, there's a new book out on Ada Lovelace, by James Essinger.  If
you're quick, you might manage a  last minute request to Santa.

****************************************************************
