!standard 6.3.1(10.1/2)                                14-07-23  AI05-0107-1/02
!standard 6.3.1(12)
!standard 6.3.1(13)
!class binding interpretation 14-05-14
!status Corrigendum 2015 14-07-23
!status ARG Approved 7-0-0  14-06-28
!status work item 14-05-14
!status received 14-02-28
!priority Low
!difficulty Easy
!qualifier Omission
!subject Is an access to a By_Protected_Procedure interface procedure a protected access?

!summary

A prefixed view of a subprogram with aspect Synchronization being By_Protected_Procedure
has convention protected. 

!question

A proposed ACATS B-Test contains a case like the following:

   package Nested is
      type Intf is synchronized interface;
      procedure PPN1 (Param : in out Intf) is abstract
         with Synchronization => By_Protected_Procedure;
   end Nested;

   procedure Sink2 (P : access protected procedure) is
   begin
      null; -- Eat an access-to-parameterless-protected-procedure.
   end Sink2;

   procedure Foo (Intf_In_Out_Parm : in out Nested.Intf'Class) is
   begin
      Sink2(Intf_In_Out_Parm.PPN1'access);  -- (1)
   end Foo;

The test expects (1) to be legal, but the convention of a prefixed view is
intrinsic (by 6.3.1(10.1/2)), and that does not match the convention
"protected" required by an access-to-protected-procedure.

The only special thing one can do with a protected procedure is to take
'Access of it for an access-to-protected-procedure type. It seems odd that
this case does not work. Should it? (Yes.)

!recommendation

(See Summary.)

!wording

Modify 6.3.1(10.1/2): 
  * any prefixed view of a subprogram (see 4.1.3){without synchronization kind
    (see 9.5) By_Entry or By_Protected_Procedure.}

AARM Reason: We except prefixed views that have synchronization kind
By_Protected_Procedure so that they can be used with an
access-to-protected-procedure type. These don't require special wrappers
(this is the normal form for a protected subprogram call). The By_Entry part
is just for consistency (there is no access-to-entry type in Ada).

Modify 6.3.1(12):
  * The default calling convention is protected for a protected subprogram,{ a
    prefixed view of a subprogram with a synchronization kind of
    By_Protected_Procedure,} and for an access-to-subprogram type with the
    reserved word protected in its definition.

Modify 6.3.1(13):
  * The default calling convention is entry for an entry{ and a prefixed view
    of a subprogram with a synchronization kind of By_Entry}.

!discussion

The prefixes of interest are prefixed views where the subprogram has
synchronization kind By_Protected_Procedure. (Aside: It's a bit odd that we
don't have a matching By_Protected_Function synchronization kind, but that
seems unnecessary for now.)

Such a prefixed view looks the same as a normal direct call to a protected
procedure, and are known to be implemented by a protected procedure, so it
would be unusual if they couldn't be used as one. After all, we do allow
similar entry calls to be used in requeues (that was the reason for introducing
synchronization kinds).

The question was raised in private mail whether a subprogram with By_Entry or
By_Protected_Procedure should still have the Ada convention (thus, still
being allowed as the prefix of Access for a *normal* access-to-procedure).
(After all, this AI only changes the convention of prefixed views, not
other uses.) This clearly would require a wrapper of some sort, but as it
seems to be a normal subprogram for many other uses it's unclear that we need
to prevent it. Thus we leave the convention of the subprogram itself as Ada.
If we did want to prevent it, we could just declare such subprograms to have
convention Intrinsic.

!corrigendum 6.3.1(10.1/2)

@drepl
@xinbull<any prefixed view of a subprogram (see 4.1.3).>
@dby
@xinbull<any prefixed view of a subprogram (see 4.1.3) without synchronization
kind (see 9.5) By_Entry or By_Protected_Procedure.>

!corrigendum 6.3.1(12)

@drepl
@xbullet<The default calling convention is @i<protected> for a protected
subprogram, and for an access-to-subprogram type with the reserved word
@b<protected> in its definition.>
@dby
@xbullet<The default calling convention is @i<protected> for a protected
subprogram, a prefixed view of a subprogram with a synchronization kind of
By_Protected_Procedure, and for an access-to-subprogram type with the
reserved word @b<protected> in its definition.>

!corrigendum 6.3.1(13)

@drepl
@xbullet<The default calling convention is @i<entry> for an entry.>
@dby
@xbullet<The default calling convention is @i<entry> for an entry and a
prefixed view of a subprogram with a synchronization kind of By_Entry.>

!ASIS

No ASIS effect.

!ACATS test

ACATS 4.0 B-Test B950001 contains two commented out examples of this
(137 and 147); those should be replaced if this AI is adopted. An ACATS
C-Test could be created to ensure this construct works.

!appendix

From: Randy Brukardt
Sent: Friday, February 28, 2014  8:39 PM

The Ada 2012 part of a fairly recent ACATS B-Test contains the following
(simplified down to the bare facts):

   package Nested is
      type Intf is synchronized interface;
      procedure PPN1 (Param : in out Intf) is abstract
         with Synchronization => By_Protected_Procedure;
   end Nested;

   procedure Sink2 (P : access protected procedure) is
   begin
      null; -- Eat an access-to-parameterless-protected-procedure.
   end Sink2;

   procedure Foo (Intf_In_Out_Parm : in out Nested.Intf'Class) is
   begin
      Sink2(Intf_In_Out_Parm.PPN1'access);  -- OK
   end Foo;

The test expects this to be legal. Gnat doesn't like it, which caused me to
look at it more carefully. The GNAT error message isn't enlightening -- it
claims that PPN1 is not a prefix of Intf'Class, which is clearly wrong, and
GNAT has no problem with similar expressions elsewhere in the test, so
something else is going on.

I started wondering if this actually makes sense. What are the requirements of
the prefix of an access-to-protected-subprogram? The RM doesn't have anything
special; the only different I can find is that the calling convention of an
access-to-protected-procedure has convention "protected" rather than "Ada".

So that begs the question of what is the calling convention of
"Intf_In_Out_Parm.PPN1"? Certainly, in the absence of By_Protected_Procedure,
it would be "Ada". 6.3.1(12) does not mention this case, also suggesting that
it is "Ada". OTOH, the entire point of the declaration is to ensure that the
completion (really "implemented by") is always a protected procedure. So it
doesn't make much sense to have the convention be "Ada".

Should the calling convention of such a subprogram be "protected"? Or is there
some hardship that might happen if we insisted on that? And if the convention
isn't "protected", precisely what value does this declaration have? We would
hope to be able to use such a subprogram just like a protected procedure,
analogous to the By_Entry case -- and the only unique thing we can do with a
protected procedure is use it as the prefix of 'Access to get an
access-to-protected-procedure.

In any case, I'll comment out these cases for now. The RM certainly doesn't
clearly provide the answer I assumed when I wrote that part of the test, so
making a requirement like this isn't justified (and it's not critical to the
value of the test).

****************************************************************

From: Tucker Taft
Sent: Friday, February 28, 2014  9:05 PM

> ...
> So that begs the question of what is the calling convention of 
> "Intf_In_Out_Parm.PPN1"? Certainly, in the absence of 
> By_Protected_Procedure, it would be "Ada". 6.3.1(12) does not mention 
> this case, also suggesting that it is "Ada". OTOH, the entire point of 
> the declaration is to ensure that the completion (really "implemented 
> by") is always a protected procedure. So it doesn't make much sense to 
> have the convention be "Ada". ...

Agreed.  It would make sense, I guess, to make a prefixed view of such a
procedure have convention access-to-protected-procedure.  If you asked
for the convention of PPN1 itself (or a non-abstract equivalent thereof),
as opposed to Intf_In_Out_Parm.PPN1, then I think you should get
"Intrinsic." The RM says that the prefixed view of a subprogram is
Intrinsic, but this is probably one of those places where a "protected
subprogram" is not just a special case of a subprogram.

****************************************************************
