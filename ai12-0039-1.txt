!standard 4.4(3/3)                                   13-05-08    AI12-0039-1/03
!standard 4.4(3.2/3)
!standard 4.5.2(3.1/3)
!standard 4.5.2(4)
!standard 4.5.2(4.1/3)
!standard 4.5.2(27/3)
!standard 4.5.2(27.1/3)
!standard 4.5.2(28.1/3)
!standard 4.5.2(28.2/3)
!standard 4.5.2(29/3)
!standard 4.5.2(30/3)
!standard 4.5.2(30.1/3)
!standard 4.5.2(30.2/3)
!standard 4.5.2(30.3/3)
!standard 4.9(11/3)
!standard 4.9(32.6/3)
!standard 8.6(27.1/3)
!standard 3.2.4(17/3)
!class binding interpretation 12-11-29
!status Amendment 202x 12-12-17
!status WG9 Approved 13-06-14
!status ARG Approved 8-0-2  12-12-06
!status work item 12-11-29
!status received 12-10-09
!priority High
!difficulty Easy
!subject Ambiguity in syntax for membership expression removed
!summary 

The choices of a membership are syntactically simple_expressions, not
choice_expressions.

!question

It appears that the Ada 2012 syntax for membership expressions introduces
ambiguities.

Assume A, B, C, and D are all objects of type Boolean. 

Consider
   A in B and C
This could be interpreted as equivalent to either of these valid Ada
expressions:
   (A in B) and C      --or as
   A in (B and C)

Similarly:

A in B in C | D  can be interpreted as
   A in (B in C) | D   --or as
   A in (B in C | D)

And:

A in B | C and D can be interpreted as
   (A in B | C) and D  --or as
   A in B | (C and D)

Should the syntax be corrected to eliminate these ambiguities? (Yes.)

!recommendation

(See summary.)

!wording

Replace the last line of 4.4(3) with:

  | *tested_*simple_expression [not] in membership_choice_list

Replace 4.4(3.2/3) with:

  membership_choice ::= *choice_*simple_expression | range | subtype_mark

[Note: The change here is to replace "choice_expression" with
"*choice_*simple_expression"; it would be ambiguous to use the usual insertion
and deletion marks in syntax, so this was not done here.]

In 4.5.2, paragraphs 3.1/3 [only the two uses], 3.b/2, 4, 27/3, 27.1/3, 28.1/3,
28.2/3, 29/3, 30/3, 30.a, 30.1/2, 30.2/2, 30.3/2, and 32.a/3, in 4.9(11/3),
 in 3.2.4(17/3), and in 8.6(27.1/3):
replace "simple_expression" with "*tested_*simple_expression".

In 4.5.2, paragraphs 3.1/3, 4.1/3, 28.1/3, in 4.9(11/3), and in 4.9(32.6/3):
replace "choice_expression" with "*choice_*simple_expression".

[Editor's note: There are a few cases where we don't have to use the new prefixes,
especially for the latter cases (where we often say "of a membership_choice")
but it's going to be clearer to just use them globally.]

In AARM 3.9.2(9.b/2), "expression" probably should be "*tested_*simple_expression",
although this isn't absolutely required.

[Editor's note: I searched for "membership", "choice_expression", and "simple_expression"
everywhere in the Standard (and AARM), and the above are the changes that I found.]

!discussion

The basic intent was that the choice of a membership was syntactically
equivalent to the other uses of a choice (such as in a case statement).
Choice_expression was introduced to minimize the incompatibility with
existing choices in case statements. Unfortunately, we failed to notice
that doing so made the grammar ambiguous.

Clearly, the constituents of a membership choice either have to have higher
precedence than a membership or have to be enclosed in parentheses. If
a membership or logical operator is used in a membership choice, it has
to be parenthesized.

This is most easily accomplished by making a membership choice a
simple expression; this gives the proper precedence.

It is annoying that choices for memberships and case statements are subtly
different. Had this been a concern in 1994, probably choices would never
have been changed from simple_expression (in Ada 83) to expression (in Ada 95)
to choice_expression (in Ada 2012). But today, minimizing compatibility issues
with Ada 95 has to be more important than having everything exactly the same.

Note that this change has no effect the interpretation of on any syntax or
construct that existed in Ada 2005 or before; it only could change the
interpretation of new Ada 2012 expressions (of which there are hopefully
very few taking advantage of this ambiguity).

Unfortunately, changing the syntax this way makes all of the rules that
talk about "the simple_expression" and "a choice_expression" in 4.5.2 ambiguous.
As such, we have to give these syntax items prefixes to eliminate any confusion.
Thus we talk about "tested_simple_expression" and "choice_simple_expression".

!corrigendum 3.2.4(17/3)

@drepl
@xbullet<a membership test whose @fa<simple_expression> is the current instance,
and whose @fa<membership_choice_list> meets the requirements for a static
membership test (see 4.9);>
@dby
@xbullet<a membership test whose @i<tested_>@fa<simple_expression> is the current
instance, and whose @fa<membership_choice_list> meets the requirements for a static
membership test (see 4.9);>

!corrigendum 4.4(3/3)

@drepl
@xcode<@fa<relation ::=
         simple_expression [relational_operator simple_expression]
       | simple_expression [>@ft<@b<not>>@fa<] >@ft<@b<in>>@fa< membership_choice_list>>
@dby
@xcode<@fa<relation ::=
         simple_expression [relational_operator simple_expression]
       | @i<tested_>simple_expression [>@ft<@b<not>>@fa<] >@ft<@b<in>>@fa< membership_choice_list>>

!corrigendum 4.4(3.2/3)

@drepl
@xcode<@fa<membership_choice ::= choice_expression | range | subtype_mark>>
@dby
@xcode<@fa<membership_choice ::= @i<choice_>simple_expression | range | subtype_mark>>

!corrigendum 4.5.2(3.1/3)

@drepl
If the tested type is tagged, then the @fa<simple_expression> shall
resolve to be of a type that is convertible (see 4.6) to the tested
type; if untagged, the expected type for the @fa<simple_expression> is
the tested type. The expected type of a @fa<choice_expression> in a
@fa<membership_choice>, and of a @fa<simple_expression> of a @fa<range>
in a @fa<membership_choice>, is the tested type of the membership operation.
@dby
If the tested type is tagged, then the @i<tested_>@fa<simple_expression> shall
resolve to be of a type that is convertible (see 4.6) to the tested
type; if untagged, the expected type for the @i<tested_>@fa<simple_expression> is
the tested type. The expected type of a @i<choice_>@fa<simple_expression> in a
@fa<membership_choice>, and of a @fa<simple_expression> of a @fa<range>
in a @fa<membership_choice>, is the tested type of the membership operation.

!corrigendum 4.5.2(4)

@drepl
For a membership test, if the @fa<simple_expression> is of a tagged class-wide
type, then the tested type shall be (visibly) tagged. 
@dby
For a membership test, if the @i<tested_>@fa<simple_expression> is of a tagged
class-wide type, then the tested type shall be (visibly) tagged. 

!corrigendum 4.5.2(4.1/3)

@drepl
If a membership test includes one or more @fa<choice_expression>s and
the tested type of the membership test is limited, then the
tested type of the membership test shall have a visible
primitive equality operator.
@dby
If a membership test includes one or more @i<choice_>@fa<simple_expression>s and
the tested type of the membership test is limited, then the
tested type of the membership test shall have a visible
primitive equality operator.

!corrigendum 4.5.2(27/3)

@drepl
For the evaluation of a membership test using @b<in> whose @fa<membership_choice_list>
has a single @fa<membership_choice>, the @fa<simple_expression> and the @fa<membership_choice>
are evaluated in an arbitrary order; the result is the result of the individual
membership test for the @fa<membership_choice>.
@dby
For the evaluation of a membership test using @b<in> whose @fa<membership_choice_list>
has a single @fa<membership_choice>, the @i<tested_>@fa<simple_expression> and the
@fa<membership_choice> are evaluated in an arbitrary order; the result is the result
of the individual membership test for the @fa<membership_choice>.

!corrigendum 4.5.2(27.1/3)

@drepl
For the evaluation of a membership test using @b<in> whose @fa<membership_choice_list>
has more than one @fa<membership_choice>, the @fa<simple_expression> of the membership test
is evaluated first and the result of the operation is equivalent to that of a
sequence consisting of an individual membership test on each @fa<membership_choice>
combined with the short-circuit control form @b<or else>.
@dby
For the evaluation of a membership test using @b<in> whose @fa<membership_choice_list>
has more than one @fa<membership_choice>, the @i<tested_>@fa<simple_expression> of the
membership test is evaluated first and the result of the operation is equivalent to that
of a sequence consisting of an individual membership test on each @fa<membership_choice>
combined with the short-circuit control form @b<or else>.

!corrigendum 4.5.2(28.1/3)

@drepl
@xbullet<The @fa<membership_choice> is a @fa<choice_expression>, and the @fa<simple_expression>
is equal to the value of the @fa<membership_choice>. If the tested type is a record type
or a limited type, the test uses the primitive equality for the type; otherwise, the test
uses predefined equality.>
@dby
@xbullet<The @fa<membership_choice> is a @i<choice_>@fa<simple_expression>, and the
@i<tested_>@fa<simple_expression> is equal to the value of the @fa<membership_choice>. If the
tested type is a record type or a limited type, the test uses the primitive equality for the
type; otherwise, the test uses predefined equality.>

!corrigendum 4.5.2(28.2/3)

@drepl
@xbullet<The @fa<membership_choice> is a @fa<range> and the value of the
@fa<simple_expression> belongs to the given @fa<range>.>
@dby
@xbullet<The @fa<membership_choice> is a @fa<range> and the value of the
@i<tested_>@fa<simple_expression> belongs to the given @fa<range>.>

!corrigendum 4.5.2(29/3)

@drepl
@xbullet<The @fa<membership_choice> is a @fa<subtype_mark>, the tested type is scalar,
the value of the @fa<simple_expression> belongs to the range of the named subtype, and
the predicate of the named subtype evaluates to True.>
@dby
@xbullet<The @fa<membership_choice> is a @fa<subtype_mark>, the tested type is scalar,
the value of the @i<tested_>@fa<simple_expression> belongs to the range of the named
subtype, and the predicate of the named subtype evaluates to True.>

!corrigendum 4.5.2(30/3)

@drepl
@xbullet<The @fa<membership_choice> is a @fa<subtype_mark>, the tested type is not
scalar, the value of the @fa<simple_expression> satisfies any
constraints of the named subtype, the predicate of the named subtype
evaluates to True, and:>
@dby
@xbullet<The @fa<membership_choice> is a @fa<subtype_mark>, the tested type is not
scalar, the value of the @i<tested_>@fa<simple_expression> satisfies any
constraints of the named subtype, the predicate of the named subtype
evaluates to True, and:>

!corrigendum 4.5.2(30.1/2)

@drepl
if the type of the @fa<simple_expression> is class-wide, the value has a tag that
identifies a type covered by the tested type;
@dby
if the type of the @i<tested_>@fa<simple_expression> is class-wide, the value has
a tag that identifies a type covered by the tested type;

!corrigendum 4.5.2(30.2/3)

@drepl
@xbullet<if the tested type is an access type and the named subtype excludes null,
the value of the @fa<simple_expression> is not null;>
@dby
@xbullet<if the tested type is an access type and the named subtype excludes null,
the value of the @i<tested_>@fa<simple_expression> is not null;>

!corrigendum 4.5.2(30.3/3)

@drepl
@xbullet<if the tested type is a general access-to-object type, the type of the
@fa<simple_expression> is convertible to the tested type and its
accessibility level is no deeper than that of the tested type;
further, if the designated type of the tested type is tagged and the
@fa<simple_expression> is nonnull, the tag of the object designated by the value of the
@fa<simple_expression> is covered by the designated type of the tested type.>
@dby
@xbullet<if the tested type is a general access-to-object type, the type of the
@i<tested_>@fa<simple_expression> is convertible to the tested type and its
accessibility level is no deeper than that of the tested type;
further, if the designated type of the tested type is tagged and the
@i<tested_>@fa<simple_expression> is nonnull, the tag of the object designated by
the value of the @i<tested_>@fa<simple_expression> is covered by the designated type
of the tested type.>

!corrigendum 4.9(11/3)

@drepl
@xbullet<a membership test whose @fa<simple_expression> is a static expression,
and whose @fa<membership_choice_list> consists only of @fa<membership_choice>s
that are either static @fa<choice_expression>s, static @fa<range>s,
or @fa<subtype_mark>s that denote a static (scalar or string) subtype;>
@dby
@xbullet<a membership test whose @i<tested_>@fa<simple_expression> is a static
expression, and whose @fa<membership_choice_list> consists only of
@fa<membership_choice>s that are either static @i<choice_>@fa<simple_expression>s,
static @fa<range>s, or @fa<subtype_mark>s that denote a static (scalar or string)
subtype;>

!corrigendum 4.9(32.6/3)

@drepl
@xbullet<a @fa<choice_expression> (or a @fa<simple_expression> of a @fa<range> that
occurs as a @fa<membership_choice> of a @fa<membership_choice_list>) of a static
membership test that is preceded in the enclosing @fa<membership_choice_list> by
another item whose individual membership test (see 4.5.2) statically yields True.>
@dby
@xbullet<a @i<choice_>@fa<simple_expression> (or a @fa<simple_expression> of a
@fa<range> that
occurs as a @fa<membership_choice> of a @fa<membership_choice_list>) of a static
membership test that is preceded in the enclosing @fa<membership_choice_list> by
another item whose individual membership test (see 4.5.2) statically yields True.>

!corrigendum 8.6(27.1/3)

@drepl
Other than for the @fa<simple_expression> of a membership test, if the
expected type for a @fa<name> or @fa<expression> is not the same as the actual
type of the @fa<name> or @fa<expression>, the actual type shall be convertible
to the expected type (see 4.6); further, if the expected type is a
named access-to-object type with designated type @i<D1> and the actual type
is an anonymous access-to-object type with designated type @i<D2>, then @i<D1>
shall cover @i<D2>, and the @fa<name> or @fa<expression> shall denote a view
with an accessibility level for which the statically deeper
relationship applies; in particular it shall not denote
an access parameter nor a stand-alone access object.
@dby
Other than for the @i<tested_>@fa<simple_expression> of a membership test, if the
expected type for a @fa<name> or @fa<expression> is not the same as the actual
type of the @fa<name> or @fa<expression>, the actual type shall be convertible
to the expected type (see 4.6); further, if the expected type is a
named access-to-object type with designated type @i<D1> and the actual type
is an anonymous access-to-object type with designated type @i<D2>, then @i<D1>
shall cover @i<D2>, and the @fa<name> or @fa<expression> shall denote a view
with an accessibility level for which the statically deeper
relationship applies; in particular it shall not denote
an access parameter nor a stand-alone access object.


!ACATS test

An ACATS B-Test could be created to test these rules, but we generally don't
test syntax rules (and the rules given in the Ada 2012 Standard cannot be
usefully implemented).

!ASIS

No ASIS impact.

!appendix

!topic Ambiguous grammar related to new membership test
!reference 4.4(2-3.2/3)
!from Adam Beneschan 12-10-09
!discussion

It appears to me that the new syntax for membership choice lists
(AI05-158) has introduced some ambiguities into the grammar.  I found
this out while looking into a comp.lang.ada post from Maxim Reznik
(https://groups.google.com/forum/?hl=en&fromgroups=#!topic/comp.lang.ada/UYjxb612B_s).

Assume A, B, C, and D are all objects of type Boolean.  Here are some
cases that I believe are ambiguous:

A in B and C [Maxim's original example] can be interpreted as
equivalent to either of these valid Ada expressions:
   (A in B) and C      --or as
   A in (B and C)

The problem is that in the second interpretation, the
membership_choice_list can be one or more membership_choices, and a
membership_choice can be a choice_expression, and a choice_expression
can be two choice_relations connected by a logical operator ("and").

A couple other examples:

A in B in C | D  can be interpreted as
   A in (B in C) | D   --or as
   A in (B in C | D)

A in B | C and D can be interpreted as
   (A in B | C) and D  --or as
   A in B | (C and D)

(Note: Although I cannot imagine ever writing a membership test with a
Boolean as the left-hand value, except in a simple case such as A in
Arr'Range where Arr is an array (Boolean range <>) of something, I
think it needs to be fixed since it's not good to have an ambiguous
grammar.)

I think the solution is probably to change

  membership_choice ::= choice_expression | range | subtype_mark

to

  membership_choice ::= simple_expression | range | subtype_mark

which means that in the new multiple-choice membership test, the
choices on the right side could not use logical or relational
operators except in parentheses.  This wouldn't introduce any
incompatibilities except with the new form of membership test; in
particular, since discrete_choice_lists would still use
choice_expressions, rather than simple_expressions, CASE statements,
variant parts, and array aggregates wouldn't be affected.  

If this change is made, then it might no longer make sense for
choice_expression and choice_relation to be defined in 4.4 since they
wouldn't be used in an expression; maybe it could be moved to 3.8.1.
But that's a less important issue.  Also, if this change is made,
some wording changes would be needed in 4.5.2, and maybe elsewhere (I
haven't checked).

****************************************************************

From: Tucker Taft
Sent: Wednesday, October 10, 2012  7:47 AM

...
> I think the solution is probably to change
>
>    membership_choice ::= choice_expression | range | subtype_mark
>
> to
>
>    membership_choice ::= simple_expression | range | subtype_mark

I agree with your analysis.

> which means that in the new multiple-choice membership test, the 
> choices on the right side could not use logical or relational 
> operators except in parentheses.  This wouldn't introduce any 
> incompatibilities except with the new form of membership test; in 
> particular, since discrete_choice_lists would still use 
> choice_expressions, rather than simple_expressions, CASE statements, 
> variant parts, and array aggregates wouldn't be affected.
>
> If this change is made, then it might no longer make sense for 
> choice_expression and choice_relation to be defined in 4.4 since they 
> wouldn't be used in an expression; maybe it could be moved to 3.8.1.
> But that's a less important issue.  Also, if this change is made, some 
> wording changes would be needed in 4.5.2, and maybe elsewhere (I 
> haven't checked).

Yes, I agree it might make sense to move choice_expression, but that is a bigger
change which at this stage is probably not worth it.

****************************************************************
