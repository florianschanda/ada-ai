!standard 13.11.4(20/3)                                   15-01-21  AI05-0146-1/01
!class presentation 15-01-21
!status work item 15-01-21
!status received 15-01-15
!priority Low
!difficulty Easy
!qualifier Omission
!subject Should say stream-oriented attribute
!summary

Read and Input are stream-oriented attributes.

!question

7.3.2(15/3) says "After a successful call on the Read or Input stream
attribute of the type T, the check is performed on the object initialized
by the stream attribute;".

However, there is no such thing (formally) as a "stream attribute". The
title of 13.13.2 is "Stream-oriented attributes"; there isn't even an
index entry for "stream attribute".

Should we change this wording? (Yes.)

!recommendation

(See Summary.)

!wording

Modify 7.3.2(15/3):

* After a successful call on the Read or Input stream{-oriented} attribute of
  the type T, the check is performed on the object initialized by the
  [stream] attribute;

!discussion

None needed.

!corrigendum 7.3.2(15/3)

@drepl
@xbullet<After a successful call on the Read or Input stream attribute of
the type @i<T>, the check is performed on the object initialized by the
stream attribute;>
@dby
@xbullet<After a successful call on the Read or Input stream-oriented attribute of
the type @i<T>, the check is performed on the object initialized by the
attribute;>

!ASIS

No ASIS effect.

!ACATS test

None needed as this is just a wording change with no semantic impact.

!appendix

From: Randy Brukardt
Sent: Thursday, January 15, 2015  5:18 PM

7.3.2(15/3) says "After a successful call on the Read or Input stream
attribute of the type T, the check is performed on the object
initialized by the stream attribute;".

But we had a discussion in Portland in relation to some other wording that
there is no such thing as a stream attribute. The RM defined these as
"stream-oriented attributes" (see the title of 13.13.2). "Stream attribute"
isn't even indexed. We changed a bunch of wording to reflect that.

So we clearly need to make a similar change here:

After a successful call on the Read or Input stream{-oriented} attribute of
the type T, the check is performed on the object initialized by the
stream{-oriented} attribute;

or, maybe better to cut redundancy:

After a successful call on the Read or Input stream{-oriented} attribute of
the type T, the check is performed on the object initialized by the [stream]
attribute;

This obviously is a presentation issue, hopefully not worth much discussion.
I'd put it into the presentation AI, except that we don't have one at the
moment (having approved the last one as part of the Corrigendum).

****************************************************************

From: Tucker Taft
Sent: Thursday, January 15, 2015  6:36 PM

I want this discussed ad nauseum at the next ARG meeting!

****************************************************************

From: Randy Brukardt
Sent: Thursday, January 15, 2015  6:55 PM

I think we discussed it way too long in Portland (which pretty much is at all
:-). But if someone felt strongly enough about it to bring it up there, it
might as well be right elsewhere in the Standard, too.

(At least the containers wording doesn't need to be fixed; it just talks about
specific attributes and never mentions "stream" at all.)

(I'm presuming that you forgot the smiley face in your message, 'cause I hope
you're not serious!)

****************************************************************

From: Erhard Ploedereder
Sent: Thursday, January 15, 2015  7:26 PM

> I want this discussed ad nauseum at the next ARG meeting!

Surely we all do, stream-orientedly.

****************************************************************

From: Tucker Taft
Sent: Thursday, January 15, 2015  8:03 PM

Here are a few smileys for future sprinkling as appropriate: ;-) ;-) ;-) ;-)

****************************************************************

From: Randy Brukardt
Sent: Thursday, January 15, 2015  8:25 PM

Technically, those are winks. And when you wink that much, people will think
that you've got Cottonwood cotton in your eye. :-) :-) :-)

****************************************************************
