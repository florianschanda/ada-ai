!standard C.8(0)                                   12-11-30    AI12-0026-1/02
!class Amendment 12-06-04
!status work item 12-06-04
!status received 12-02-28
!priority Low
!difficulty Medium
!subject Task_Safe aspect
!summary

The Task_Safe aspect indicates the programmer's intent that a subprogram
can safely be called from multiple tasks.

!problem

There is a need to have a way to specify that a subprogram is task-safe.

!proposal

Ada should supply a Task_Safe aspect that can be applied to a
non-protected subprogram declaration. Task_Safe subprograms are intended
to be callable from multiple tasks. The language would as much as
possible enforce rules to prevent problems (particularly of maintenance
inadvertantly eliminating the property, creating hard-to-find-bugs).

In particular, the aspect would restrict the associated subprogram to
disallow:

(1) Calls on other non-protected subprograms that are not Pure or
    Task_Safe;

(2) Dependence on global variables that are neither atomic nor task nor
    protected.

Since all language defined subprograms already have an implementation
requirement to be reentrant according to the Annex A definition of the
term, we also say that all language defined subprograms have the
Task_Safe aspect, and thus may be called by any subprogram that has the
Task_Safe aspect.

Similarly, all protected subprograms have the Task_Safe aspect.

Protected entries and task entries are not subprograms and therefore
do not have the aspect, however since they are not subprograms, they
are not excluded from being called from a Task_Safe subprogram by these
rules.

The Task_Safe aspect is not inherited.

The Task_Safe aspect is a boolean aspect that must be specified by a
static boolean expression.

A Task_Safe'Class aspect is also defined that can be applied to a
subprogram of a tagged type that applies to any overrides of the
subprogram in any derived types.

Task_Safe'Class is also a static boolean aspect.

!wording

C.8(0) - Task Safety

Static Semantics

For a non-protected subprogram, the following language-defined aspects
may be specified with an aspect_specification:

  Task_Safe         The type of aspect Task_Safe is Boolean. This aspect
                    specifies that the subprogram specification does not
                    mention variables that are not atomic, protected, or
                    task variables, nor does it call subprograms for
                    which the Task_Safe aspect evaluates to False.
                    If directly specified, the aspect_definition shall
                    be a static expression. If not specified, the
                    Task_Safe aspect is False.

  Task_Safe'Class   The type of aspect Task_Safe'Class is Boolean. This
                    aspect specifies that an operation of a tagged type
                    and its descendants does not mention variables
                    that are not atomic, protected, or task variables,
                    nor does it call subprograms for which the Task_Safe
                    aspect evaluates to False. If directly specified,
                    the aspect_definition shall be a static expression.
                    If not specified (including by inheritance), the
                    Task_Safe'Class aspect is False.

The Task_Safe aspect for all language defined subprograms, all
subprograms declared in declared pure library units, and all protected
subprograms evaluates to True.

Legality Rules

The Task_Safe and Task_Safe'Class aspect shall not be specified if the
corresponding subprogram specification mentions variables that are not
atomic, protected, or task variables, or if it calls subprograms for
which the aspect evaluates to False.

The Task_Safe aspect shall not be specified for an abstract subprogram
or a null procedure. Only the Task_Safe'Class aspect may be specified
for such a subprogram.

If a type T has an implicitly declared subprogram P inherited from a
parent type T1 and a homograph (see 8.3) of P from a progenitor type T2,
and
     - the corresponding primitive subprogram P1 of type T1 is neither
       null nor abstract; and
     - the Task_Safe'Class aspect only applies to either P1 or to the
       corresponding primitive subprogram P2 of T2
then:
     - If the type T is abstract, the implicitly declared subprogram P
       is abstract.
     - Otherwise, the subprogram P requires overriding and shall be
       overridden with a nonabstract subprogram.

If a renaming of a subprogram S1 overrides an inherited subprogram S2,
then the overriding is illegal unless the value of the Task_Safe'Class
aspect that applies to S1 is the same as the value of the
Task_Safe'Class aspect that applies to S2.

Static Semantics

If a Task_Safe'Class aspect is specified for a primitive subprogram of
a tagged type T, then the associated expression also applies to the
corresponding primitive subprogram of each descendant of T.

!discussion

Note that this aspect also would facilitate programming in a functional
style, although is not sufficient for functional programming. Functional
programming is a different need which would require a different aspect
as no global variables of any kind should be allowed. Pragma Pure is
fairly close to the required semantics for that (it's a bit too
restrictive), and it's probably a bad idea to define another
categorization that is too similar to an existing one. It may make sense
however to define another subprogram aspect such as Reentrant that could
be more restrictive than Task_Safe and not allow dependence on any
global variables. If such an aspect is needed, it should be covered
under a separate AI.

The rules given are not enough to make a subprogram completely
task-safe. For instance, protected objects or atomic variables could be
used in such a way as to cause "live-lock" or similar problems.
Similarly, problems could result if multiple tasks pass the same objects
by reference to Task_Safe subprograms, or if overlapping objects are
passed by reference to a Task_Safe subprogram.

The presence of the aspect provides additional documentation of the
intent however, which is useful by itself.

RM A(3/2) states the implementation requirement that all language
defined subprograms are reentrant in the sense that concurrent calls
on the same subprogram perform as specified so long as all parameters
that could be passed by reference denote non-overlapping objects.
We would want these subprograms to be callable from a subprogram that
has the Task_Safe aspect, and the definition in A(3/2) satisfies the
qualities of the Task_Safe aspect, so we say that all language defined
subprograms implicitly have the Reentrant aspect.

The original idea was to have a package categoration for this, instead
of a subprogram aspect. The rules would have been similar in that there
would be:
(1) Semantic dependence only on Pure and Task_Safe packages. (Same
    wording of rules as for Pure).
(2) No declaration of library-level variables, unless the variable has a
    task or protected type, or is an atomic variable.

Such a scheme might also involve having an aspect for private types
which declared that they are implemented in a task-safe fashion (thus
allowing them to be used to declare a global variable in a Task_Safe
package) -- this would work much like Preelaborable_Initialization.

The subprogram aspect idea however seems simpler, more flexible, and
would eliminate the need for a special aspect for private type packages,
while allowing for the withing of packages that are neither pure
nor reentrant. The only restriction is that any calls involving such
types from the body of a Task_Safe subprogram must also be Task_Safe or
calls to pure subprograms.

We considered other names for the aspect, such as Reentrant, and
Monitored.

There is a concern however that such a name usage should match the
common usage of the terminology.

In computer literature, the related terms are reentrant, thread-safety,
and monitored.

Reentrant doesn't quite work however, according to the definition in
Wikipedia;

"In computing, a computer program or subroutine is called reentrant if
 it can be interrupted in the middle of its execution and then safely
 called again ("re-entered") before its previous invocations complete
 execution. The interruption could be caused by an internal action such
 as a jump or call, or by an external action such as a hardware
 interrupt or signal. Once the reentered invocation completes, the
 previous invocations will resume correct execution."

Any call to a protected subprogram doesn't work this way, as a call to
a protected operation will interfere with a second caller into the same
protected operation. The second caller will need to wait until the first
caller completes the protected operation.

Thread-safe isn't useful here either, since Ada does not requires
implementors to map tasks to threads.

The term "Monitored" doesn't quite work either, as that definition also
seemed too restrictive.

From Wikipedia, the definition of Monitor is;

"In concurrent programming, a monitor is an object or module intended to
 be used safely by more than one thread. The defining characteristic of
 a monitor is that its methods are executed with mutual exclusion. That
 is, at each point in time, at most one thread may be executing any of
 its methods."

We want to allow a normal reentrant subprogram, which can allow multiple
threads of execution, assuming it does not access global variables.

Task_Safe is the closest description to capture the semantics of the
aspect, since it is a term specific to Ada and does not conflict with
common terminology.

!ACATS test

** TBD.

!appendix

From: Brad Moore
Sent: Tuesday, February 28, 2012  8:39 AM

!topic pragma Restrictions (No_Global_Objects)
!reference Ada 2005 RM H.4 (24)
!from /Brad Moore 12-02-28/
!keywords Functional Programming, thread safe
!discussion

There is a need to be able to apply a restriction on a package that disallows
the declaration of global objects.

This would facilitate functional programming where all object declarations are
stack based, which in turn would help ensure that facilities provided by the
package are thread safe.

Such a restriction would also improve maintainability of a package, as it would
prevent a future maintainer of the package from adding global declarations to
either the spec or body of the package, which could cause problems for clients
of the package that expect a called subprogram of the package is thread safe.

****************************************************************

From: Bob Duff
Sent: Tuesday, February 28, 2012  9:16 AM

> There is a need to be able to apply a restriction on a package that
> disallows the declaration of global objects.

There's no reason to restrict global constants.
It might be useful to restrict global variables.
Is pragma Pure too restrictive for your purposes?

By "global", I assume you mean what the RM calls "library level".
The RM uses "global" in a relative way, as in "X is global to Q":

    package body Pack is
        procedure P is
            X : T;
            procedure Q is
                ... X ...

which doesn't stop P from being thread safe.

****************************************************************

From: Jean-Pierre Rosen
Sent: Tuesday, February 28, 2012  9:38 AM

> There is a need to be able to apply a restriction on a package that
> disallows the declaration of global objects.

Right, and there are zillions of other interesting possible restrictions.

The difficult issue is where to draw the line between what is enforced by the
compiler and what is enforced by other tools (AdaControl of course had that rule
for a very long time).

Hmmm... I'd like to see a discussion about "good taste for restrictions" - if we
could find a simple enough criterion on what should or should not be a
restriction (in the language - implementers are always free to go beyond that
line). I don't think we want to receive hundreds of suggestions for possible
restrictions in Ada 2020, not questionning their intrinsic value.

****************************************************************

From: Brad Moore
Sent: Tuesday, February 28, 2012  8:33 AM

>> There is a need to be able to apply a restriction on a package that
>> disallows the declaration of global objects.
>
>There's no reason to restrict global constants.

Good point.

>It might be useful to restrict global variables.
>Is pragma Pure too restrictive for your purposes?

Yes. I have pragma Elaborate on the packages, but that is as close  to Pure that
I've been able achieve.

>
>By "global", I assume you mean what the RM calls "library level".

Yes, I modified the subject header of the small to reflect that.

****************************************************************

From: Brad Moore
Sent: Wednesday, February 29, 2012  8:36 PM

>> There is a need to be able to apply a restriction on a package that
>> disallows the declaration of global objects.

Good point.

> There's no reason to restrict global constants.
> It might be useful to restrict global variables.
> Is pragma Pure too restrictive for your purposes?

Yes, the best I could do is pragma Preelaborate with the current source.

>
> By "global", I assume you mean what the RM calls "library level".
> The RM uses "global" in a relative way, as in "X is global to Q":

Yes, the Restriction should be No_Library_Level_Variables, instead of
No_Global_Objects

****************************************************************

From: Brad Moore
Sent: Wednesday, February 29, 2012  10:08 PM

>> There is a need to be able to apply a restriction on a package that
>> disallows the declaration of global objects.
>>
> Right, and there are zillions of other interesting possible restrictions.
>
> The difficult issue is where to draw the line between what is enforced
> by the compiler and what is enforced by other tools (AdaControl of
> course had that rule for a very long time).
>
> Hmmm... I'd like to see a discussion about "good taste for restrictions"
> - if we could find a simple enough criterion on what should or should
> not be a restriction (in the language - implementers are always free
> to go beyond that line).

I agree and think that would be a good to have such a discussion.

I can't speak for the zillions of other possibilities, so maybe to begin with, I
will mention some criteria that I see being met by a restriction such as,
No_Library_Level_Variables.

The following fall under what I would call "good taste for restrictions"

1) A restriction that supports or facilitates a significant paradigm of software
   design. In this case, the restriction would facilitate functional
   programming, and parallelism. Object oriented programming might be another
   example of such a paradigm.

2) A restriction that supports a significant trend in hardware. In this case,
   the trend is multicore processors. Another example of such a hardware
   platform might be small devices such as smart-phones and ARM devices, or
   perhaps server farms, etc.

3) A restriction that helps avoid software maintenance hazards. In a other
   recent Ada-comment post, an example was given involving a call into a nested
   procedure. A future maintainer of that package might think that it would be
   better to move the nested variables to a library level declaration, and then
   provide another facility to the package to access those variables, not
   realizing that making such a change breaks the thread-safety of the package,
   which could lead to nasty bugs in some clients that expect the thread-safety.
   Such a restriction could have been placed on the package which might have
   caused the maintainer to think twice about making the change.

4) A restriction that asserts certain semantics about the package, that assist
   someone reading the software, that instructs the reader on some quality of
   the software that informs how the software is to be used. Relying on a third
   party tool to enforce this, means the property of the unit is not necessarily
   visible to the maintainer. The No_Library_Level_Variables restriction for
   example might be something some would look for, if they were interested in
   thread-safe programming.

5) A restriction that might be applied selectively to certain units. For
   example, No_Library_Level_Variables might be a restriction that one might
   want to apply only to packages where thread-safety is important. Some
   third-party tools apply a coding standard to all units in a project, and
   maybe weren't designed to apply restrictions with fine-grained control on a
   per unit basis. I believe AdaControl does have such very fine grained
   control, but other tools may not be so flexible.

6) A restriction where it is desired that it be closely tied to the software.
   Relying on a third-party tool to enforce such a restriction might not be
   desirable for a general purpose utility, because not all users of the utility
   are likely to have the same set of third-party tools, or have them configured
   the same way.

7) A restriction that is useful for third party software developers whose source
   is intended to be portable, where the restriction might be needed for target
   platforms that are not supported by the 3rd party software tools.

> I don't think we want to receive hundreds of
> suggestions for possible restrictions in Ada 2020, not questionning
> their intrinsic value.

I believe No_Library_Level_Variables would pass the above tests. It would be
interesting to see some other possibilities or examples from the set of other
possibilities would meet these criteria. Would the remaining list still be in
the order of hundreds?

I'm sure there are other "good taste" criteria that I have missed also.

Some criteria that I think are poor taste for a restriction might include those
that are only style related, such as enforcing a coding standard, but otherwise
do not provide any other benefits.

It would be interesting to hear what others think.

****************************************************************

From: Geert Bosch
Sent: Thursday, March  1, 2012  10:52 AM

>> By "global", I assume you mean what the RM calls "library level".
>> The RM uses "global" in a relative way, as in "X is global to Q":
>
> Yes, the Restriction should be No_Library_Level_Variables, instead of
> No_Global_Objects

Note that the Ravenscar restrictions require protected objects and tasks to be
allocated at the library level. I don't think it makes a lot of sense to
restrict those, especially as you'd want to encourage the use of protected
objects.

****************************************************************

From: Jean-Pierre Rosen
Sent: Friday, March  2, 2012  12:32 AM

Good point. And maybe you really want to restrict variables in visible parts,
but what about bodies? private parts? As soon as you have states, (or memorizing
functions!), you need some global variables.

Of course, you are free to not put the restriction. But it makes sense to
restrict on visible parts only (all manipulations must be done through provided
operations), on bodies (no global state, protect against reentrancy), to except
some kind of variables (task, protected)...

I'd say that as soon as you need fine grain parameterization, you are in the
domain of tools.

****************************************************************

From: Tucker Taft
Sent: Friday, March  2, 2012  8:08 AM

pragma Pure addresses the issue of no global state.
I would think we might want some kind of pragma Reentrant which would require
that there is no updating of non-atomic, non-protected global variables.

****************************************************************

From: Bob Duff
Sent: Friday, March  2, 2012  2:33 PM

> pragma Pure addresses the issue of no global state.

Sort of.  It's perhaps overly restrictive for the purpose(s?) being discussed
here.  E.g. you might want to allow "X: constant := Call(...);".

We decided that memory allocation is an important "side effect", so impure, but
I'm not sure that's what we want here.  After all, so-called "pure functional
languages" do lots of memory allocation, and and it's considered just as
irrelevant as the "side effect" of raising the temperature of the CPU.

****************************************************************

From: Riccardo Bernardini
Sent: Friday, March  2, 2012  3:22 PM

>> pragma Pure addresses the issue of no global state.
>
> Sort of. It's perhaps overly restrictive for the purpose(s?) being
> discussed here. E.g. you might want to allow
> "X: constant := Call(...);".

I remember faced this type of problem (forcing packages to be multi-task safe)
some time ago.  I also remember that I tried the "Pure" solution, but it was way
too restrictive and in the end I renounced.  Alas, I do not remember the details
and why I thought that the use of pragma Pure was too restrictive.

****************************************************************

From: Brad Moore
Sent: Saturday, March  3, 2012  8:14 AM

...
> I'd say that as soon as you need fine grain parameterization, you are in
> the domain of tools.

I agree that if you want such fine grained control, such as restricting only in
the visible part, then that should be in the domain of tools.

But that definitely is not what I was looking for here. I would want the
Reentrant property to unconditionally apply to both the spec and the body,
otherwise one could not assume the library unit was reentrant.

Note also, that memorizing functions would be allowed, so long as the state
information was stored in a protected or task object.

****************************************************************

From: Brad Moore
Sent: Saturday, March  3, 2012  8:38 AM

...
> I would think we might want some kind of pragma Reentrant which would
> require that there is no updating of non-atomic, non-protected global
> variables.

I like your idea of a Reentrant pragma. That seems to nicely capture the desired
intent.

I am thinking such a pragma would be allowed as a categorization pragma, but
ideally also allowed as a configuration pragma.

As a categorization pragma, (i.e. applied to a library unit) it would require
that the library unit could only "with" other Reentrant or Pure library units.

Such a unit would not necessarily be preelaborable however. Since it should
allow constant objects to be declared, as Bob Duff mentioned. So a Reentrant
pragma would have no relevance for Annex E in remote operations.

For remote usage, one of the categoration pragmas in Annex E would also need to
be applied.

As a configuration pragma, it would allow the property to be applied system
wide, or to a partition, which might be useful for functional programming.

It may make sense to also allow the pragma to be applied locally, for example,
to a particular subprogram declaration in a package.

****************************************************************

From: Bob Duff
Sent: Saturday, March  3, 2012  9:29 AM

> As a configuration pragma, it would allow the property to be applied
> system wide, or to a partition, which might be useful for functional
> programming.

It's hard to see how it would be practical to have Reentrant system wide.  I
mean, programs that don't do I/O aren't particularly useful.  Ada doesn't have
monadic I/O, which is probably a good thing.  ;-)

We could have Reentrant/Nonreentrant which would override each other in the same
way Suppress/Unsuppress override each other.  Then you could have a system-wide
Reentrant pragma, and mark small portions of your program Nonreentrant, for a
mostly-functional style program.

****************************************************************

From: Brad Moore
Sent: Saturday, March  3, 2012  11:09 AM

This sounds like a good idea also.

But for I/O, since we are saying that tasks would be allowed, couldn't the I/O
be managed by a task, allowing Reentrant to still apply?

[Editor's unwritten reply: "Sure, but that wouldn't make the *entire* system
Reentrant unless *none* of the language-defined I/O is used. That's not
a very likely situation and surely not worth a language-defined pragma.
In any case, 'Reentrant' alone could not make a routine or package task-safe
(unless it was way too complex for the language-definition). So it doesn't
seem valuable to use it everywhere."]

****************************************************************

From: Brad Moore
Sent: Saturday, March  3, 2012  12:48 AM

>Note that the Ravenscar restrictions require protected objects and
>tasks to be allocated at the library level. I don't think it makes a
>lot of sense to restrict those, especially as you'd want to encourage
>the use of protected objects.

Good point. I agree.

****************************************************************

From: Jean-Pierre Rosen
Sent: Monday, March  5, 2012  1:19 AM

> I remember faced this type of problem (forcing packages to be
> multi-task safe) some time ago.  I also remember that I tried the
> "Pure" solution, but it was way too restrictive and in the end I
> renounced.  Alas, I do not remember the details and why I thought that
> the use of pragma Pure was too restrictive.

"Pure" was intended to allow f.e. the removal of multiple calls, I don't think
it was ever intended to ensure reentrancy.

[Editor's note: I do not believe this remark. I don't think "multiple calls"
has much to do with the reason for pragma Pure; and even if it did, it is
stronger than the requirements for reentrancy, so it is essentially the same
thing. The Ada 95 Rationale only mentions "no state" as the meaning of Pure,
and that it has an important effect on elaboration (along with Preelaborate).]

****************************************************************

From: Brad Moore
Sent: Friday, November 30, 2012  4:25 PM

Here is my part 2 of my homework assignment.

I started out by trying to define a Reentrant package categorization, but was
influenced by Randy's suggestion that a subprogram aspect might work better. I
came to that same conclusion, and went in that direction, and defined both a
Task_Safe aspect, and a Task_Safe'Class aspect.

The original idea was to call this new feature, Reentrant, but at the last ARG
meeting, it was suggested that Monitored might be a better alternative.

After looking at definitions for the common usage of these terms, I found
neither matched very well to describe the feature. Reentrant is more of a single
processor concept and implies no interference, allowing an ISR for example to
execute the code after interrupting the subprogram. A protected operation
doesn't satisfy this definition, since the locking on the protected operation
interferes on the second caller, which has to wait for the first caller to leave
the protected operation. Monitored has the opposite connotation, that at most
one thread can execute the code at a time, but we want this new feature to also
allow simple calls such as pure functions that require no locking.

I took the liberty of calling this new feature Task_Safe, subject to the ARG's
approval of course, and took a stab at the wording, though I suspect this AI
will need another goround at least if it is approved for intent.

[This is version /02 of the AI - Editor.]

****************************************************************

From: Randy Brukardt
Sent: Friday, November 30, 2012  9:21 PM

...
> I took the liberty of calling this new feature Task_Safe, subject to
> the ARG's approval of course, and took a stab at the wording, though I
> suspect this AI will need another goround at least if it is approved
> for intent.

I took the liberty of reading this as I filed it, and here are a few nitpicks:

---

Since all language defined subprograms already have an implementation
requirement to be reentrant according to the Annex A definition of the term, we
also say that all language defined subprograms have the Task_Safe aspect, and
thus may be called by any subprogram that has the Task_Safe aspect.

That might be a compatibility problem if the language-defined subprograms are
written in Ada. In particular, it would appear to be impossible to write Text_IO
without reference to global Standard_In and Standard_Out objects of some sort.
(There is another AI to patch up the wording of the Standard to say something
about these, to treat uses of them as overlapping even though they don't
explicitly appear in calls.) One could invent a non-Ada mode to deal with these
sort of things, but it doesn't bode well for the restrictions if the runtime has
to be compiled that way.

---

  Task_Safe         The type of aspect Task_Safe is Boolean. This aspect
                    specifies that the subprogram specification does not
                    mention variables that are not atomic, protected, or
                    task variables, nor does it call subprograms for
                    which the Task_Safe aspect evaluates to False. ...

I don't think you mean "subprogram specification" here, as that is just the
declaration and profile. I'm sure you meant to include the body, and really the
restriction only needs to apply to the body.

---

The Task_Safe aspect for all language defined subprograms, all subprograms
declared in declared pure library units, and all protected subprograms evaluates
to True.

This *definitely* would be a compatibility problem if the restrictions are
enforced in a protected subprogram. (And while a generic subprogram is not a
subprogram, a protected subprogram *is* a subprogram. One use of protected
objects is to provide a "lock" for a global object, that can't be eliminated
here.

---

I definitely support what you're trying to do. I had a similar idea some years
ago and explored it some on comp.lang.ada (and some in my head). I never could
get it to usefully work out; I thought that we needed "task-safe" user-defined
types (objects of such a type would also be allowed) but I couldn't come up with
any useful definition that encapsulated the correct usage for those. You've
skipped those, but that (for instance) prevents using queue containers (although
a tweak to your wording probably would allow them,  you'd have to also allow
references to objects of (class-wide) synchronized interfaces).

But compatibility can't be sacrificed here, and surely it can't be illegal to
compile Text_IO!

P.S. We're not going to approve any Amendments until we formally start Ada's
next revision -- which probably won't be for another couple of years at least --
so you have plenty of time to work this out (unless some wants to implement this
immediately, can't say about that).

****************************************************************
