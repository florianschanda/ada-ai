!standard A.4.11(54/3)                                   13-10-31  AI05-0088-1/01
!standard A.4.11(55/3)
!class binding interpretation 13-10-31
!status work item 13-10-31
!status received 13-09-26
!priority Low
!difficulty Easy
!qualifier Omission
!subject UTF_Encoding.Conversions and overlong characters on input

!summary

An overlong encoding in the input to Encode and Convert should raise
Encoding_Error.

!question

A.4.11(50/3) says that "For UTF-8, no overlong encoding is returned". It
does not say what happens if there is a character with overlong encoding
on input.

Overlong encodings used to be tolerated by 10646, but are now considered
invalid. Therefore, an overlong input should raise Encoding_Error per
A.4.11(54/3). Should this be changed? (Yes.)

!recommendation

(See Summary.)

!wording

Modify A.4.11(54/3):

* By a {Convert or} Decode function when a UTF encoded string contains an
  invalid encoding sequence{@redundant[, including an overlong encoding for
  UTF-8]}.

Modify A.4.11(55/3):

* By a {Convert or} Decode function when the expected encoding is UTF-16BE
  or UTF-16LE and the input string has an odd length.

!discussion

This is not quite compatible, in that an overlong encoding on input used
to be tolerated, but it had to be converted to a proper encoding on output.
The only known Ada 2012 implementation at this writing fails to do this
conversion, so the output violates A.4.11(50/3).

Note that under no circumstances is a UTF-8 to UTF-8 conversion a no-op
even with the original Ada 2012 rules: there must be a check for an overlong
encoding, with those encodings removed. It's probably easier to raise
Encoding_Error than fixing the overlong encodings.

Also note that A.4.11(54/3) and A.4.11(55/3) are written to apply only to
Decode functions, but should also apply to Convert functions (both take
encoded input).

!ASIS

No changes needed.

!ACATS test

An ACATS C-Test is needed to check that the handling of overlong encodings is
correct.

!appendix

From: Jean-Pierre Rosen
Sent: Thursday, September 26, 2013  10:46 AM

An issue that came up while writing the test for A.4.11:

A.4.11(50/3) says that "For UTF-8, no overlong encoding is returned". It
does not say what happens if there is a character with overlong encoding
on input.

If I believe Wikipedia, overlong encodings used to be tolerated by
10646, but are now considered invalid. Therefore, an overlong input
should raise Encoding_Error per A.4.11(54/3) (Note also that
A.4.11(54/3) and A.4.11(55/3) apply only to Encode functions, but should
also apply to Convert functions).

As currently written, the test for conversions passes if:
- an overlong character on input raises Encoding_Error, or
- an overlong character on input is accepted and produces the valid
corresponding encoding on output.

Note that this means (in both cases) that converting from UTF-8 to UTF-8
is /not/ a no-op; Gnat fails on that (it does not raise Encoding_Error
and produces an overlong character on output).

So:
1) Is my interpretation correct? Or should the test require the raising
of Encoding_Error?

2) Should I turn this into an AI? (I fear I know the answer to this
question)

****************************************************************

From: Jeff Cousins
Sent: Monday, September 30, 2013  8:04 AM

I’ve had a word with the UK NB expert on character sets and he agreed with
Wikipedia.

****************************************************************
