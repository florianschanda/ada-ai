!standard 6.1.1(26.4/4)                              15-10-08  AI12-0176-1/01
!class binding interpretation 15-10-08
!status ARG Approved 7-0-1  15-10-16
!status work item 15-10-08
!status received 15-09-25
!priority Low
!difficulty Easy
!qualifier Omission
!subject 6.1.1(26.4/4) only applies to tagged types
!summary

6.1.1(26.4/4) only applies to tagged types.

!question

6.1.1(26.4/4) starts "If X is of a specific type T then" but the following
wording uses T'Class. Clearly, this only applies to tagged types and the wording
should say so, right? (Yes.)

!recommendation

(See Summary.)

!wording

Modify 6.1.1(26.4/4):

* If X is of a specific {tagged} type T then

!discussion

3.4.1(3/2) tells us that all explicitly declared types are specific types.
That's clearly not what we want for this bullet, since T'Class is only defined
for tagged types. So a correction is needed.

!ASIS

No ASIS effect.

!ACATS test

This should be covered by tests for X'Old.

!appendix

From: Tucker Taft
Sent: Friday, September 25, 2015  9:20 AM

Ultra-minor editorial issue:

I happened to be reading the section on Preconditions and Postconditions
(6.1.1) and ran across this in 26.4/4:

    If X is of a specific type T then
       ... T'Class(X)

It seems we should say "If X is of a specific *tagged* type T then..."

Perhaps "specific" implies tagged, but I am not sure of that, and adding "tagged"
would help the reader in any case, I believe.

****************************************************************

From: Randy Brukardt
Sent: Thursday, October 8, 2015  9:52 PM

3.4.1(3/2) says:
Every type is either a specific type, a class-wide type, or a universal type.
A specific type is one defined by a type_declaration, a
formal_type_declaration, or a full type definition embedded in another
construct. Class-wide and universal types are implicitly defined...

Ergo, this bullet applies to almost all types as written, and then it is of
course nonsense for untagged types. So it's not quite as minor an issue as you
seem to imply. (The intent is fairly obvious anyway, so we don't need to rush
on this one but it should get fixed.)

****************************************************************
